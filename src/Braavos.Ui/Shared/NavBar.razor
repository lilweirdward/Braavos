@inject ILoginAccountService loginAccountService
@inject NavigationManager navManager;

<LoginPortal @bind-Visible="loginIsVisible" />

<div class="hide-sm">
    <header class="navbar @((BackgroundIsVisible ? "" : "no-bg"))">
        @if (NavigationIsVisible)
        {
            <section class="navbar-section">
                <NavLink href="account" class="btn btn-link">My Account</NavLink>
                <a href="#" class="btn btn-link">How It Works</a>
            </section>
        }
        <section class="navbar-center">
            <NavLink href="" Match="NavLinkMatch.All">
                <img class="logo" src="img/logo.png" />
            </NavLink>
        </section>
        <section class="navbar-section">
            @if (isLoggedIn)
            {
                if (NavigationIsVisible)
                {
                    <button class="btn btn-link" @onclick="(async () => await LogOut())">Log Out</button>
                }
                else
                {
                    <NavLink href="account" class="btn btn-link">My Account</NavLink>
                }
            }
            else
            {
                <button class="btn btn-link" @onclick="() => loginIsVisible = true">Log In</button>
            }
        </section>
    </header>
</div>

<div class="show-sm">
    <header class="navbar @((BackgroundIsVisible ? "" : "no-bg"))">
        <section class="navbar-section">
            <img class="logo" src="img/logo.png" />
        </section>
        @if (NavigationIsVisible)
        {
            <section class="navbar-section">
                <div class="dropdown dropdown-right @((dropdownOpen ? "active" : ""))">
                    <button class="hamburger hamburger--slider dropdown-toggle" type="button" onclick="this.focus()"
                            @onfocusin="() => dropdownOpen = true" @onfocusout="() => dropdownOpen = false">
                        <span class="hamburger-box">
                            <span class="hamburger-inner"></span>
                        </span>
                    </button>
                    <ul class="menu">
                        <li class="menu-item">
                            <NavLink href="account" class="btn btn-link">My Account</NavLink>
                        </li>
                        <li class="menu-item">
                            <a href="#" class="btn btn-link">How It Works</a>
                        </li>
                        <li class="menu-item">
                            <a href="#" class="btn btn-link">Log Out</a>
                        </li>
                    </ul>
                </div>
            </section>
        }
        else
        {
            <section class="navbar-section">
                @if (isLoggedIn)
                {
                    <NavLink href="account" class="btn btn-link">My Account</NavLink>
                }
                else
                {
                    <a href="#" class="btn btn-link" @onclick="() => loginIsVisible = true">Log In</a>
                }
            </section>
        }
    </header>
</div>

@code {

    private bool dropdownOpen;
    private bool loginIsVisible;
    private bool isLoggedIn;

    [Parameter]
    public bool BackgroundIsVisible { get; set; }

    [Parameter]
    public bool NavigationIsVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await loginAccountService.IsLoggedIn();
        Console.WriteLine($"isLoggedIn = {isLoggedIn}");
    }

    private async Task LogOut()
    {
        await loginAccountService.LogOut();
        navManager.NavigateTo("");
    }

}
