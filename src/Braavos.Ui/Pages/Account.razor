@page "/account"
@inject IUserService userService
@inject BraavosClient backendService
@inject NavigationManager navManager

<NavBar BackgroundIsVisible="true" NavigationIsVisible="true" />

@if (account is null)
{
    <div id="loading-wrapper">
        <!-- I know this is ugly but it's from here: https://loading.io/css/ -->
        <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
    </div>
}
else
{

    <div class="wrapper hero bg-gray" style="margin-top: 100px">
        <div class="container">
            <h1>@account.RulerName <small>of @account.NationName</small></h1>
            <div>
                <AccountTypeChip AccountType="@account.Role" />
                <AllianceChip AllianceName="@account.Alliance" />
            </div>
        </div>
    </div>

    <div class="wrapper py-xl">
        <div class="container">
            <BalanceView Balance="@account.Balance" />
        </div>
    </div>

    <div class="wrapper py-xl">
        <div class="container">
            <h1>My Account</h1>
            <div class="columns m-2">
                <div class="column">
                    Open Slots: <strong>@(account.AvailableSlots ?? 0)</strong>
                </div>
                <div class="column text-right text-italic">
                    Last Updated: 2020-06-27 05:27:31 (server time)
                </div>
            </div>
            <PotentialTransactions Account="@account" />
        </div>
        <div class="container py-xl">
            <RecentTransactions Account="@account" />
        </div>
    </div>

}

@code {

    private Braavos.Core.Entities.Account account = null;

    protected override async Task OnInitializedAsync()
    {
        if (!(await userService.IsLoggedIn()))
            navManager.NavigateTo("");

        var authorizedUser = await userService.GetAccount();

        try
        {
            account = await backendService.GetAccountAsync(authorizedUser);
        }
        catch (KeyNotFoundException)
        {
            Console.WriteLine($"{authorizedUser.ToString()} does not have a valid account.");
            navManager.NavigateTo("");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            navManager.NavigateTo("");
        }
    }

}
