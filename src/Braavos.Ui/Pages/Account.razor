@page "/account"
@inject IUserService userService
@inject BraavosClient backendService
@inject NavigationManager navManager

<NavBar BackgroundIsVisible="true" NavigationIsVisible="true" />

@if (account is { })
{

    <div class="wrapper hero bg-gray" style="margin-top: 100px">
        <div class="container">
            <h1>@account.RulerName <small>of @account.NationName</small></h1>
            <div>
                <AccountTypeChip AccountType="@account.Role" />
                <AllianceChip AllianceName="@account.Alliance" />
            </div>
        </div>
    </div>

    <div class="wrapper py-xl">
        <div class="container">
            <BalanceView Balance="@account.Balance" />
        </div>
    </div>

    <div class="wrapper py-xl">
        <div class="container">
            <h1>My Account</h1>
            <div class="columns m-2">
                <div class="column">
                    Open Slots: <strong>@(account.AvailableSlots ?? 0)</strong>
                </div>
                <div class="column text-right text-italic">
                    Last Updated: 2020-06-27 05:27:31 (server time)
                </div>
            </div>
            <PotentialTransactions Account="@account" />
        </div>
        <div class="container py-xl">
            <div class="panel py-lg px-2 my-2">
                <div class="columns">
                    <div class="column col-auto">
                        <i class="icon icon-plus c-hand"></i>
                    </div>
                    <div class="column col-auto">
                        <h4 class="m-0">Recent Credit History</h4>
                    </div>
                    <div class="column">
                        <span class="text-gray">+2 out, -1 in</span>
                    </div>
                </div>
                <div class="divider my-2"></div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Other Ruler</th>
                            <th>Type</th>
                            <th>Money</th>
                            <th>Tech</th>
                            <th>Soldiers</th>
                            <th>Credit Change</th>
                            <th>Sent On</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Shadowfury</td>
                            <td>Outgoing</td>
                            <td>0</td>
                            <td>100</td>
                            <td>0</td>
                            <td class="text-success">+100 tech sent</td>
                            <td>2020-06-12</td>
                        </tr>
                        <tr>
                            <td>Prince Oberyn</td>
                            <td>Outgoing</td>
                            <td>0</td>
                            <td>100</td>
                            <td>0</td>
                            <td class="text-success">+100 tech sent</td>
                            <td>2020-06-12</td>
                        </tr>
                        <tr>
                            <td>Master Ice</td>
                            <td>Incoming</td>
                            <td>9,000,000</td>
                            <td>0</td>
                            <td>0</td>
                            <td class="text-error text-bold">-$9m received</td>
                            <td>2020-06-8</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

}

@code {

    private Braavos.Core.Entities.Account account = null;

    protected override async Task OnInitializedAsync()
    {
        if (!(await userService.IsLoggedIn()))
            navManager.NavigateTo("");

        var authorizedUser = await userService.GetAccount();

        try
        {
            account = await backendService.GetAccountAsync(authorizedUser);
        }
        catch (KeyNotFoundException)
        {
            Console.WriteLine($"{authorizedUser.ToString()} does not have a valid account.");
            navManager.NavigateTo("");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            navManager.NavigateTo("");
        }
    }

}
